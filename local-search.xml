<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CentOS7定时重启V2ray</title>
    <link href="/2024/03/27/CentOS7%E5%AE%9A%E6%97%B6%E9%87%8D%E5%90%AFV2ray/"/>
    <url>/2024/03/27/CentOS7%E5%AE%9A%E6%97%B6%E9%87%8D%E5%90%AFV2ray/</url>
    
    <content type="html"><![CDATA[<h2 id="创建脚本"><a href="#创建脚本" class="headerlink" title="创建脚本"></a>创建脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi restart_and_log_trojan.sh<br>chmod +x restart_trojan_service.sh<br></code></pre></td></tr></table></figure><p>内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># 定义日志文件的路径</span><br>LOG_FILE=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/trojan_restart.log&quot;</span><br><br><span class="hljs-comment"># 检查日志文件是否存在，如果不存在，则创建它</span><br><span class="hljs-keyword">if</span> [ ! -f <span class="hljs-string">&quot;<span class="hljs-variable">$LOG_FILE</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    touch <span class="hljs-string">&quot;<span class="hljs-variable">$LOG_FILE</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 记录重启服务的时间</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Restarting trojan.service at <span class="hljs-subst">$(date)</span>&quot;</span> &gt;&gt; <span class="hljs-string">&quot;<span class="hljs-variable">$LOG_FILE</span>&quot;</span><br><br><span class="hljs-comment"># 重启 trojan.service 服务</span><br>sudo systemctl restart trojan.service<br><br><span class="hljs-comment"># 增加延迟以确保服务有足够的时间重启</span><br>sleep 10<br><br><span class="hljs-comment"># 记录服务状态</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Status of trojan.service after restart:&quot;</span> &gt;&gt; <span class="hljs-string">&quot;<span class="hljs-variable">$LOG_FILE</span>&quot;</span><br>sudo systemctl status trojan.service &gt;&gt; <span class="hljs-string">&quot;<span class="hljs-variable">$LOG_FILE</span>&quot;</span> 2&gt;&amp;1<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;--------------------------------------------------&quot;</span> &gt;&gt; <span class="hljs-string">&quot;<span class="hljs-variable">$LOG_FILE</span>&quot;</span><br><br></code></pre></td></tr></table></figure><p><img src="/2024/03/27/CentOS7%E5%AE%9A%E6%97%B6%E9%87%8D%E5%90%AFV2ray/image-20240327131650534.png" alt="image-20240327131650534"></p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab -e<br></code></pre></td></tr></table></figure><p>在 <code>crontab</code> 文件中添加以下行以安排任务（假设在每周日和周四的晚上 11 点执行）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">0 23 * * 0,4 ~/restart_trojan_service.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>VPN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VPN</tag>
      
      <tag>V2ray</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Trojan搭建服务器</title>
    <link href="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>系统：CentOS7</p><p>WEB Server：Nginx</p><p>域名：namecheap（付费域名）</p><p>CND：Cloudflare</p><h2 id="域名托管"><a href="#域名托管" class="headerlink" title="域名托管"></a>域名托管</h2><p>将域名托管给Cloudflare，更改namecheap中的nameserver为Cloudflare</p><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240203181801819.png" alt="image-20240203181801819"></p><p>在Cloudflare中配置域名并绑定IP</p><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240203182346573.png" alt="image-20240203182346573"></p><p>等待一段时间等到域名生效，Cloudflare变成为Active状态，且能ping通方可进行下一步。</p><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240203182047797.png" alt="image-20240203182047797"></p><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240203142152383.png" alt="image-20240203142152383"></p><h2 id="Trojan"><a href="#Trojan" class="headerlink" title="Trojan"></a>Trojan</h2><h3 id="1-SSH远程连接"><a href="#1-SSH远程连接" class="headerlink" title="1.SSH远程连接"></a>1.SSH远程连接</h3><p>新建ssh文件,或者直接ssh root@IP -p 22连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动一个子进程</span><br>spawn ssh root@IP -p 22<br><span class="hljs-comment"># 当出现password:字样时</span><br>expect <span class="hljs-string">&quot;password:&quot;</span>  <br><span class="hljs-comment"># 像子进程发送密码</span><br>send <span class="hljs-string">&quot;PWD&quot;</span> <br><span class="hljs-comment"># 控制权交还给用户</span><br>interact <br></code></pre></td></tr></table></figure><p>用expect ssh文件路径执行脚本文件.</p><h3 id="2-安装前置命令"><a href="#2-安装前置命令" class="headerlink" title="2.安装前置命令"></a>2.安装前置命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.安装wget和tar命令</span><br>yum install -y wget<br>yum install -y tar<br></code></pre></td></tr></table></figure><h3 id="3-安装acme-sh"><a href="#3-安装acme-sh" class="headerlink" title="3.安装acme.sh"></a>3.安装acme.sh</h3><p>安装acme工具，用来申请SSL/TLS证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 2.安装acme工具，用来申请SSL/TLS证书</span><br>curl https://get.acme.sh | sh<br></code></pre></td></tr></table></figure><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240527205557468.png" alt="image-20240527205557468"></p><p>如果安装时提示发行证书过期,更新CA证书即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#centos更新CA证书</span><br>sudo yum update ca-certificates<br></code></pre></td></tr></table></figure><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240527214846969.png" alt="image-20240527214846969"></p><h3 id="4-安装trojan步骤"><a href="#4-安装trojan步骤" class="headerlink" title="4.安装trojan步骤"></a>4.安装trojan步骤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 3.一键安装</span><br>wget -N --no-check-certificate -q -O trojan_install.sh <span class="hljs-string">&quot;https://raw.githubusercontent.com/xyz690/Trojan/master/trojan_install.sh&quot;</span> &amp;&amp; chmod +x trojan_install.sh &amp;&amp; bash trojan_install.sh<br></code></pre></td></tr></table></figure><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240203183852476.png" alt="image-20240203183852476"></p><p>输入www域名,自动申请证书,注意申请后的ssl证书等级</p><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240203184250178.png" alt="image-20240203184250178"></p><p>等待安装成功</p><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240203201307049.png" alt="image-20240203201307049"></p><h3 id="5-检测服务安装是否成功"><a href="#5-检测服务安装是否成功" class="headerlink" title="5.检测服务安装是否成功"></a>5.检测服务安装是否成功</h3><h4 id="检查服务端"><a href="#检查服务端" class="headerlink" title="检查服务端"></a>检查服务端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#状态查询,确保服务正常运行</span><br>systemctl status trojan<br></code></pre></td></tr></table></figure><h4 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h4><p>注意这里智能查看是否开放,ssl导致的服务无法使用端口依然是不能用的.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcping google.com 443<br></code></pre></td></tr></table></figure><h4 id="检查ssl"><a href="#检查ssl" class="headerlink" title="检查ssl"></a>检查ssl</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看证书等级</span><br>openssl s_client -connect IP:443 -showcerts<br></code></pre></td></tr></table></figure><h4 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h4><p>浏览器输入https://域名:443,看网页是否能够被访问</p><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240528091551839.png" alt="image-20240528091551839"></p><h3 id="Trojan命令"><a href="#Trojan命令" class="headerlink" title="Trojan命令"></a>Trojan命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看状态</span><br>systemctl status trojan.service<br><br><span class="hljs-comment">#启动</span><br>systemctl start trojan<br><br><span class="hljs-comment">#重启</span><br>systemctl restart trojan<br><br><span class="hljs-comment">#关闭</span><br>systemctl stop trojan<br><br><span class="hljs-comment">#状态查询（如果有显示绿色active(running)，就表示正常运行中）</span><br>systemctl status trojan<br><br><span class="hljs-comment">#持续查看输出日志</span><br>journalctl -u trojan -f<br><br><span class="hljs-comment">#错误查询</span><br>journalctl -e -u trojan.service<br><br><span class="hljs-comment">#开机自动启动</span><br>systemctl <span class="hljs-built_in">enable</span> trojan<br><br><span class="hljs-comment">#禁止开机自动启动</span><br>systemctl <span class="hljs-built_in">disable</span> trojan<br><br><span class="hljs-comment"># 查看配置文件，重点看remote_addr、remote_port、password</span><br>cat /usr/src/trojan-macos/trojan/config.json<br></code></pre></td></tr></table></figure><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240203201825046.png" alt="image-20240203201825046"></p><h3 id="Trojan客户端"><a href="#Trojan客户端" class="headerlink" title="Trojan客户端"></a>Trojan客户端</h3><p>安卓&amp;windows： V2rayN客户端</p><p>IOS&amp;MAC： shadowrocket</p><p>添加trojan服务器，输入IP、端口、密码即可</p><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240203204600537.png" alt="image-20240203204600537"></p><h2 id="验证ssl证书"><a href="#验证ssl证书" class="headerlink" title="验证ssl证书"></a>验证ssl证书</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl s_client -connect yourserver:port -showcerts<br></code></pre></td></tr></table></figure><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240528090230080.png" alt="image-20240528090230080"></p><h2 id="手动安装证书"><a href="#手动安装证书" class="headerlink" title="手动安装证书"></a>手动安装证书</h2><p>自动安装证书失败时,需要手动安装证书</p><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240203184526143.png" alt="image-20240203184526143"></p><p>经过手动安装证书和安装trojan2.sh等其他脚本误打误撞证书安装成功。安装证书成功后需要卸载重装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载acme</span><br>curl https://get.acme.sh | sh<br><span class="hljs-comment"># 生成证书</span><br>~/.acme.sh/acme.sh --issue -d <span class="hljs-variable">$your_domain</span> --nginx<br><span class="hljs-comment"># 安装证书</span><br>~/.acme.sh/acme.sh --installcert -d <span class="hljs-variable">$your_domain</span> --key-file /usr/<span class="hljs-built_in">local</span>/etc/trojan/private.key --fullchain-file /usr/<span class="hljs-built_in">local</span>/etc/trojan/cert.crt<br><span class="hljs-comment"># 证书自动升级</span><br>~/.acme.sh/acme.sh --upgrade --auto-upgrade<br></code></pre></td></tr></table></figure><h2 id="一键安装bbr加速"><a href="#一键安装bbr加速" class="headerlink" title="一键安装bbr加速"></a>一键安装bbr加速</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh<br></code></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="ssh远程连接密钥问题"><a href="#ssh远程连接密钥问题" class="headerlink" title="ssh远程连接密钥问题"></a>ssh远程连接密钥问题</h3><p>当出现这个问题时,说明之前的密钥相冲突,vi ~/.ssh/know_hosts,将第四行(服务器IP开头)删掉.然后再次ssh连接,用密码连接即可</p><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240527204609769.png" alt="image-20240527204609769"></p><p>curl <a href="https://get.acme.sh/">https://get.acme.sh</a> | sh执行时报错,无tar命令.</p><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240527204927554.png" alt="image-20240527204927554"></p><h3 id="运行中突然code-exited-status-1-FAILURE"><a href="#运行中突然code-exited-status-1-FAILURE" class="headerlink" title="运行中突然code=exited, status=1/FAILURE"></a>运行中突然code=exited, status=1/FAILURE</h3><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240527143229374.png" alt="image-20240527143229374"></p><p>然后使用 journalctl -e -u trojan.service 命令查看错误</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">5</span>月 <span class="hljs-number">27</span> <span class="hljs-number">02</span>:<span class="hljs-number">21</span>:<span class="hljs-number">04</span> famous-drums-<span class="hljs-number">2</span><span class="hljs-selector-class">.localdomain</span> trojan<span class="hljs-selector-attr">[15795]</span>: Welcome to trojan <span class="hljs-number">1.16</span>.<span class="hljs-number">0</span><br><span class="hljs-number">5</span>月 <span class="hljs-number">27</span> <span class="hljs-number">02</span>:<span class="hljs-number">21</span>:<span class="hljs-number">04</span> famous-drums-<span class="hljs-number">2</span><span class="hljs-selector-class">.localdomain</span> trojan<span class="hljs-selector-attr">[15795]</span>: <span class="hljs-selector-attr">[2024-05-27 02:21:04]</span> <span class="hljs-selector-attr">[FATAL]</span> fatal: config<span class="hljs-selector-class">.json</span>: cannot open file<br><span class="hljs-number">5</span>月 <span class="hljs-number">27</span> <span class="hljs-number">02</span>:<span class="hljs-number">21</span>:<span class="hljs-number">04</span> famous-drums-<span class="hljs-number">2</span><span class="hljs-selector-class">.localdomain</span> trojan<span class="hljs-selector-attr">[15795]</span>: <span class="hljs-selector-attr">[2024-05-27 02:21:04]</span> <span class="hljs-selector-attr">[FATAL]</span> exiting. . .<br><span class="hljs-number">5</span>月 <span class="hljs-number">27</span> <span class="hljs-number">02</span>:<span class="hljs-number">21</span>:<span class="hljs-number">04</span> famous-drums-<span class="hljs-number">2</span><span class="hljs-selector-class">.localdomain</span> systemd<span class="hljs-selector-attr">[1]</span>: trojan<span class="hljs-selector-class">.service</span>: control process exited, code=exited status=<span class="hljs-number">1</span><br><span class="hljs-number">5</span>月 <span class="hljs-number">27</span> <span class="hljs-number">02</span>:<span class="hljs-number">21</span>:<span class="hljs-number">04</span> famous-drums-<span class="hljs-number">2</span><span class="hljs-selector-class">.localdomain</span> trojan<span class="hljs-selector-attr">[5926]</span>: <span class="hljs-selector-attr">[2024-05-27 02:21:04]</span> <span class="hljs-selector-attr">[WARN]</span> got signal: <span class="hljs-number">15</span><br><span class="hljs-number">5</span>月 <span class="hljs-number">27</span> <span class="hljs-number">02</span>:<span class="hljs-number">21</span>:<span class="hljs-number">04</span> famous-drums-<span class="hljs-number">2</span><span class="hljs-selector-class">.localdomain</span> trojan<span class="hljs-selector-attr">[5926]</span>: <span class="hljs-selector-attr">[2024-05-27 02:21:04]</span> <span class="hljs-selector-attr">[WARN]</span> trojan service stopped<br><span class="hljs-number">5</span>月 <span class="hljs-number">27</span> <span class="hljs-number">02</span>:<span class="hljs-number">21</span>:<span class="hljs-number">04</span> famous-drums-<span class="hljs-number">2</span><span class="hljs-selector-class">.localdomain</span> systemd<span class="hljs-selector-attr">[1]</span>: Stopped trojan.<br><span class="hljs-number">5</span>月 <span class="hljs-number">27</span> <span class="hljs-number">02</span>:<span class="hljs-number">21</span>:<span class="hljs-number">04</span> famous-drums-<span class="hljs-number">2</span><span class="hljs-selector-class">.localdomain</span> systemd<span class="hljs-selector-attr">[1]</span>: Unit trojan<span class="hljs-selector-class">.service</span> entered failed state.<br><span class="hljs-number">5</span>月 <span class="hljs-number">27</span> <span class="hljs-number">02</span>:<span class="hljs-number">21</span>:<span class="hljs-number">04</span> famous-drums-<span class="hljs-number">2</span><span class="hljs-selector-class">.localdomain</span> systemd<span class="hljs-selector-attr">[1]</span>: trojan<span class="hljs-selector-class">.service</span> failed.<br><span class="hljs-number">5</span>月 <span class="hljs-number">27</span> <span class="hljs-number">02</span>:<span class="hljs-number">21</span>:<span class="hljs-number">04</span> famous-drums-<span class="hljs-number">2</span><span class="hljs-selector-class">.localdomain</span> systemd<span class="hljs-selector-attr">[1]</span>: Started trojan.<br><span class="hljs-number">5</span>月 <span class="hljs-number">27</span> <span class="hljs-number">02</span>:<span class="hljs-number">21</span>:<span class="hljs-number">04</span> famous-drums-<span class="hljs-number">2</span><span class="hljs-selector-class">.localdomain</span> trojan<span class="hljs-selector-attr">[15801]</span>: Welcome to trojan <span class="hljs-number">1.16</span>.<span class="hljs-number">0</span><br><span class="hljs-number">5</span>月 <span class="hljs-number">27</span> <span class="hljs-number">02</span>:<span class="hljs-number">21</span>:<span class="hljs-number">04</span> famous-drums-<span class="hljs-number">2</span><span class="hljs-selector-class">.localdomain</span> trojan<span class="hljs-selector-attr">[15801]</span>: <span class="hljs-selector-attr">[2024-05-27 02:21:04]</span> <span class="hljs-selector-attr">[WARN]</span> trojan service (server) started at <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">443</span><br></code></pre></td></tr></table></figure><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240527142946349.png" alt="image-20240527142946349"></p><p>持续输出日志,然后分别执行stop和start命令,发现stop时config.json: cannot open file导致的问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#持续查看输出日志</span><br>journalctl -u trojan -f<br></code></pre></td></tr></table></figure><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240527153723286.png" alt="image-20240527153723286"></p><p>重启几次服务器后失败,遂直接重装</p><h3 id="测试443端口sslv3-alert-certificate-unknown"><a href="#测试443端口sslv3-alert-certificate-unknown" class="headerlink" title="测试443端口sslv3 alert certificate unknown"></a>测试443端口sslv3 alert certificate unknown</h3><p>通过浏览器的<a href="https://IP:443访问时无法打开网页,日志journalctl">https://IP:443访问时无法打开网页,日志journalctl</a> -u trojan -f输出如下内容</p><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240528085446842.png" alt="image-20240528085446842"></p><p>说是tls版本不对,在cloudflare中吧tls版本调成1.3</p><p><img src="/2024/02/03/Trojan%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240528090420697.png" alt="image-20240528090420697"></p>]]></content>
    
    
    <categories>
      
      <category>VPN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VPN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原神私服</title>
    <link href="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><strong>基本原理：</strong></p><p>【客户端】- 通过其他的代理相关软件，在本地抓包拦截原神客户端发向官方服务器的网络请求，并转而发送向自建的服务器（可以搭建在本地机器）</p><p>【服务端】- 接收客户端发来的请求并模拟原版返回值，由于可以自定义数据，故而实现了自由度极高的私服功能。类似的东西还有很多，Grasscutter只是其中的一个。</p><h2 id="Linux服务器"><a href="#Linux服务器" class="headerlink" title="Linux服务器"></a>Linux服务器</h2><p>服务器版本：CentOS7</p><h3 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#挂载阿里云yum源</span><br>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br><span class="hljs-comment">#清理yum</span><br>yum clean all<br></code></pre></td></tr></table></figure><h3 id="关闭防火墙和selinux"><a href="#关闭防火墙和selinux" class="headerlink" title="关闭防火墙和selinux"></a>关闭防火墙和selinux</h3><p><strong>如果购买的是服务器，需要到服务商防火墙配置界面（如腾讯云），设置防火墙策略！！！<br>逐步开放8080端口、22102端口、444端口、9001端口</strong></p><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop firewalld.service<br></code></pre></td></tr></table></figure><p><strong>设置防火墙开机不自启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">disable</span> firewalld.service<br></code></pre></td></tr></table></figure><p>查看防火墙状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --state<br></code></pre></td></tr></table></figure><h4 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/selinux/config<br></code></pre></td></tr></table></figure><p><strong>把SELINUX=enable</strong><br><strong>改成SELINUX=disabled</strong></p><p>重启服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reboot<br></code></pre></td></tr></table></figure><p><strong>开机查看selinux状态（disable为关闭）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sestatus<br></code></pre></td></tr></table></figure><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724161420953.png" alt="image-20220724161420953"></p><h3 id="添加Docker镜像源"><a href="#添加Docker镜像源" class="headerlink" title="添加Docker镜像源"></a>添加Docker镜像源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724161538235.png" alt="image-20220724161538235"></p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724162200607.png" alt="image-20220724162200607"></p><h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start docker<br></code></pre></td></tr></table></figure><h2 id="部署原神服务端"><a href="#部署原神服务端" class="headerlink" title="部署原神服务端"></a>部署原神服务端</h2><h3 id="拉取grasscutter镜像"><a href="#拉取grasscutter镜像" class="headerlink" title="拉取grasscutter镜像"></a>拉取grasscutter镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#需要先启动docker</span><br>docker pull evendevil66/grasscutter<br><span class="hljs-comment">#查看是否拉取成功</span><br>docker images<br></code></pre></td></tr></table></figure><p>可以使用<strong>docker images</strong> 查看是否拉取成功</p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724163025083.png" alt="image-20220724163025083"></p><h3 id="部署服务端到docker"><a href="#部署服务端到docker" class="headerlink" title="部署服务端到docker"></a>部署服务端到docker</h3><p>下载元神服务端，上传并解压到 <code>/root</code>，使用 <code>ls /root</code>可以看到目录下已经多了 <code>full-grasscutter-&quot;version&quot;</code>文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#根据压缩文件类型安装unzip</span><br>yum install unzip<br><span class="hljs-built_in">cd</span> /root<br><span class="hljs-comment">#解压</span><br>unzip full-grasscutter-3.0-Beta.9.rar<br></code></pre></td></tr></table></figure><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724170419249.png" alt="image-20220724170419249"></p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724171644271.png" alt="image-20220724171644271"></p><h3 id="更改config-json"><a href="#更改config-json" class="headerlink" title="更改config.json"></a>更改config.json</h3><p>打开服务端目录下的 <code>congfig.json</code> 编辑里面的 <code>accessAddress</code>默认是127.0.0.1 <strong>更改为服务器的IP地址（共2处要更改）</strong></p><p>注意那个443一定要改成444端口!!!</p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724170938615.png" alt="image-20220724170938615"></p><h3 id="以docker运行上传的原神服务端"><a href="#以docker运行上传的原神服务端" class="headerlink" title="以docker运行上传的原神服务端"></a>以docker运行上传的原神服务端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#运行容器</span><br>docker run -dit \<br>-v /root/full-grasscutter-3.0-Beta.9:/var/grasscutter \<br>-p 444:444 \<br>-p 444:444/udp  \<br>-p 22102:22102 \<br>-p 22102:22102/udp \<br>-p 8080:8080 \<br>-p 8080:8080/udp \<br>-p 9001:9001 \<br>-p 9001:9001/udp \<br>--name grasscutter \<br>-v /sys/fs/cgroup:/sys/fs/cgroup \<br>--restart always \<br>--privileged=<span class="hljs-literal">true</span> evendevil66/grasscutter /usr/sbin/init<br><br><span class="hljs-comment">#查询容器(所有的)</span><br>docker container ls -all<br><span class="hljs-comment">#删除当前容器</span><br>docker container rm mycentos<br></code></pre></td></tr></table></figure><p>/root/full-grasscutter-3.0-Beta.9是元神服务端解压后的文件夹，：后面/var/grasscutter是容器目录。</p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724171352563.png" alt="image-20220724171352563"></p><h4 id="docker容器操作"><a href="#docker容器操作" class="headerlink" title="docker容器操作"></a>docker容器操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看docker镜像(运行中的)</span><br>docker ps<br><span class="hljs-comment">#查询容器(所有的)</span><br>docker container ls -all<br><br><span class="hljs-comment">#启动单个容器</span><br>docker start &lt;CONTAINER ID&gt;<br><br><span class="hljs-comment">#进入容器</span><br>docker <span class="hljs-built_in">exec</span> -it CONTAINERID /bin/bash<br><br><span class="hljs-comment">#闭所有容器</span><br>docker stop $(docker ps -a -q)<br><br><span class="hljs-comment">#关闭单个容器</span><br>docker stop &lt;CONTAINER ID&gt;<br><br><span class="hljs-comment">#删除所有容器</span><br>docker rm $(docker ps -a -q)<br><br><span class="hljs-comment">#删除单个容器</span><br>docker rm &lt;CONTAINER ID&gt;<br></code></pre></td></tr></table></figure><h3 id="测试服务端"><a href="#测试服务端" class="headerlink" title="测试服务端"></a>测试服务端</h3><p><strong>在服务器内使用浏览器</strong>输入 <code>&quot;服务器IP地址&quot;+端口号9001</code> 即可查看运行状态</p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724171526062.png" alt="image-20220724171526062"></p><h3 id="安装plugin"><a href="#安装plugin" class="headerlink" title="安装plugin"></a>安装plugin</h3><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220731175041822.png" alt="image-20220731175041822"></p><p>将插件拖拽到物理机的/root/full-grasscutter-3.0-Beta.9/plugins下面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将物理机文件夹中的文件复制到容器里指定文件夹的位置</span><br>docker cp /root/full-grasscutter-3.0-Beta.9/plugins grasscutter:/var/grasscutter/plugins<br>docker <span class="hljs-built_in">exec</span> -it grasscutter /bin/bash            <span class="hljs-comment"># 进入grasscutter容器</span><br><span class="hljs-built_in">cd</span> /var/grasscutter                                  <span class="hljs-comment"># 进入刚刚复制进去的文件夹</span><br><span class="hljs-comment"># 退出docker，重启容器，也可以在docker容器内部启动grasscutter文件java -jar grasscutter.jar</span><br>docker stop grasscutter<br>docker start grasscutter<br></code></pre></td></tr></table></figure><h4 id="Grasscutter-Tools"><a href="#Grasscutter-Tools" class="headerlink" title="Grasscutter Tools"></a>Grasscutter Tools</h4><p>修改服务器地址，<a href="https://10.10.10.66:444，点击查询，右侧服务器状态-&gt;远程执行插件显示对号说明成功。">https://10.10.10.66:444，点击查询，右侧服务器状态-&gt;远程执行插件显示对号说明成功。</a></p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220731175801766.png" alt="image-20220731175801766"></p><h2 id="进入割草机环境"><a href="#进入割草机环境" class="headerlink" title="进入割草机环境"></a>进入割草机环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#进入docker容器</span><br>docker <span class="hljs-built_in">exec</span> -it grasscutter /bin/bash<br>supervisorctl<br><span class="hljs-built_in">fg</span> grasscutter<br></code></pre></td></tr></table></figure><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724172135934.png" alt="image-20220724172135934"></p><p><strong>完成以上操作就可以开始创建账号了</strong></p><h3 id="创建账号"><a href="#创建账号" class="headerlink" title="创建账号"></a>创建账号</h3><p>,默认不可以自动注册，需要使用 <code>account</code> 指令在控制台创建账号才可以登录；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">创建方法如下：<br>语法：`account create 登录账号 UID`<br>例如：`account create autumn 123456`<br></code></pre></td></tr></table></figure><p>也可以更改配置允许不存在的账号自动注册（不建议开启）。</p><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>config.json</p><p>卡池配置文件为 <code>.\data\Banners.json</code> ，其中</p><ul><li><code>gachaType=200,scheduleId=893</code> 的为常驻池</li><li><code>gachaType=301,scheduleId=903</code> 的为角色 UP 池 (多 UP: 增加 <code>gachaType</code> 为 302,303,304… 的成员即可)</li><li><code>gachaType=400,scheduleId=913</code> 的为武器 UP 池</li></ul><p>多卡池：增加 <code>gachaType</code> 为非以上四个值的成员即可，注意客户端只识别以上四个 <code>gachaType</code> 值，添加的其他卡池不会显示类型</p><p>本站整合包默认为万达桃三 UP 及前两者专武 (专武封面为前者，是客户端内置资源，无法修改)</p><p><code>rateUpItems1</code> 为 UP 五星，<code>rateUpItems2</code> 为 UP 四星，对应 id 在 <code>Handbook_CHS.txt</code> 中可以找到</p><p>需修改 <code>prefabPath</code> <code>previewPrefabPath</code> <code>titlePath</code> 中的 <code>A0**</code> 为对应的卡池 id（在 <code>卡池顺序.xlsx </code>中）</p><p><code>costItem</code> 为抽卡耗费的货币名称，<code>223</code> 为纠缠之缘，<code>224</code> 为相遇之缘（修改可能会引发 bug）</p><p><code>sortId</code> 为卡池排序，越大越靠前</p><p><code>beginTime</code> <code>endTime</code> 为卡池开始 / 结束的 10 位时间戳</p><p><code>softPity</code> 最少几次出 <code>hardPity</code> 最多几次出 <code>eventChance</code> 歪的概率 % ，如果没有这三个成员自己加上即可</p><p><code>bannerType</code> 为 <code>STANDARD</code> 表示常驻池，<code>EVENT</code> 表示角色 UP 池，<code>WEAPON</code> 表示武器 UP 池 (这个参数貌似只是看的)</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="444不通"><a href="#444不通" class="headerlink" title="444不通"></a>444不通</h3><p>因为客户端不能直接改配置文件，所以只能改代理，把请求原神服务器的ip:端口重定向到私服的IP:端口。私服的端口为444。</p><p>telnet IP 444发现不通，服务器中telent IP 444不通，但是telnet 127.0.0.1 444居然是通的。</p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724224914838.png" alt="image-20220724224914838"></p><h4 id="查看端口号情况"><a href="#查看端口号情况" class="headerlink" title="查看端口号情况"></a>查看端口号情况</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看端口号情况</span><br>netstat -nplt<br></code></pre></td></tr></table></figure><p>服务器的几个端口都处于监听状态</p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724224956024.png" alt="image-20220724224956024"></p><h4 id="查看转发列表"><a href="#查看转发列表" class="headerlink" title="查看转发列表"></a>查看转发列表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看转发列表</span><br>iptables -t nat -nL<br></code></pre></td></tr></table></figure><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724225144664.png" alt="image-20220724225144664"></p><h4 id="查看内核转发状态"><a href="#查看内核转发状态" class="headerlink" title="查看内核转发状态"></a>查看内核转发状态</h4><p>确保ipv4处于开启状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看内核转发状态</span><br>sysctl net.ipv4.ip_forward<br><span class="hljs-comment">#开启内核转发</span><br><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward<br>sysctl -p<br></code></pre></td></tr></table></figure><h4 id="进入docker容器"><a href="#进入docker容器" class="headerlink" title="进入docker容器"></a>进入docker容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#进入容器</span><br>docker <span class="hljs-built_in">exec</span> -it CONTAINERID /bin/bash<br><span class="hljs-comment">#退出容器</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h5 id="查看端口号情况-1"><a href="#查看端口号情况-1" class="headerlink" title="查看端口号情况"></a>查看端口号情况</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看监听的tcp端口情况</span><br>netstat -nplt<br><span class="hljs-comment">#查看监听的udp端口情况</span><br>netstat -nplu<br></code></pre></td></tr></table></figure><p>docker处于监听状态的端口，tcp有9001和8080，udp有22102，唯独没有444端口。</p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724232444934.png" alt="image-20220724232444934"></p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724232924142.png" alt="image-20220724232924142"></p><p>发现是前面解压后config.json文件没把443改为444，直接进入容器中vi /var/grasscutter/config.json更改后重启即可。</p><h3 id="客户端代理方式"><a href="#客户端代理方式" class="headerlink" title="客户端代理方式"></a>客户端代理方式</h3><h4 id="flidder拦截重定向"><a href="#flidder拦截重定向" class="headerlink" title="flidder拦截重定向"></a>flidder拦截重定向</h4><p>打开Fiddler，菜单栏 Tool -&gt; options -&gt; https</p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724234426687.png" alt="image-20220724234426687"></p><p>切换到 connections，把端口改成8181，按 OK 保存设置</p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724234515849.png" alt="image-20220724234515849"></p><p>系统代理中出现8181代理端口即为成功。</p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724234959610.png" alt="image-20220724234959610"></p><p>主界面选 Fiddler Script ，清空原来的脚本，粘贴如下内容。脚本中的 oS.host 后面改为服务器的IP地址，最后点左上角SaveScript</p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724234715944.png" alt="image-20220724234715944"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* Original script by NicknameGG, modified for Grasscutter by contributors. */</span><br><span class="hljs-keyword">import</span> System;<br><span class="hljs-keyword">import</span> System.Windows.Forms;<br><span class="hljs-keyword">import</span> Fiddler;<br><span class="hljs-keyword">import</span> System.Text.RegularExpressions;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handlers</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> function <span class="hljs-title">OnBeforeRequest</span><span class="hljs-params">(oS: Session)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(oS.host.EndsWith(<span class="hljs-string">&quot;.yuanshen.com&quot;</span>) || oS.host.EndsWith(<span class="hljs-string">&quot;.hoyoverse.com&quot;</span>) || oS.host.EndsWith(<span class="hljs-string">&quot;.mihoyo.com&quot;</span>)) &#123;<br>            oS.host = <span class="hljs-string">&quot;10.10.10.66:444&quot;</span>; <span class="hljs-comment">// This can also be replaced with another IP address.（输入域名也可）</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(oS.uriContains(<span class="hljs-string">&quot;http://uspider.yuanshen.com:8888/log&quot;</span>))&#123;<br>            oS.oRequest.FailSession(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;Blocked&quot;</span>, <span class="hljs-string">&quot;haha&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="直接用Genshin代理助手"><a href="#直接用Genshin代理助手" class="headerlink" title="直接用Genshin代理助手"></a>直接用Genshin代理助手</h4><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724235633021.png" alt="image-20220724235633021"></p><h3 id="客户端成功进入界面"><a href="#客户端成功进入界面" class="headerlink" title="客户端成功进入界面"></a>客户端成功进入界面</h3><p><strong>如果使用的是 国服客户端，启动后有弹窗 (仅 Win) 且登录页面标题为 <code>HOYOVERSE</code> 而不是 <code>miHoYo</code> 即代表成功连接私服；</strong></p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220724233609106.png" alt="image-20220724233609106"></p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220725001738819.png" alt="image-20220725001738819"></p><p>使用命令获得90级刻晴</p><p><img src="/2022/07/24/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220725002034722.png" alt="image-20220725002034722"></p>]]></content>
    
    
    <categories>
      
      <category>game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>game</tag>
      
      <tag>伺服器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DNF私服</title>
    <link href="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h2><p>随便买一个带云服务器</p><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220720232357708.png" alt="image-20220720232357708"></p><p>安装好环境，这里使用CentOS6.5</p><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220720232503113.png" alt="image-20220720232503113"></p><h2 id="部署服务端"><a href="#部署服务端" class="headerlink" title="部署服务端"></a>部署服务端</h2><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>把dof和dof.tar.gz(这个文件会把很多系统文件覆盖)两个文件传到根目录/下面</p><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220720233057574.png" alt="image-20220720233057574"></p><h3 id="安装服务端"><a href="#安装服务端" class="headerlink" title="安装服务端"></a>安装服务端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /<br>chmod 777 dof<br>./dof<br></code></pre></td></tr></table></figure><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220720234045149.png" alt="image-20220720234045149"></p><p>搭建完成，可以看的出来用的是xampp(Apache + MySQL + PHP + Perl)环境，安装完成后会自动重启。</p><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220720234345195.png" alt="image-20220720234345195"></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>进入/home/neople/game/cfg下面，找到cain01…cain05，更改这5个文件里面的IP配置。因为每个文件要改8处IP，要改5个文件，所以推荐下载下来改完后再上传覆盖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/neople/game/cfg<br></code></pre></td></tr></table></figure><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220720234655129.png" alt="image-20220720234655129"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi cain01.cfg<br></code></pre></td></tr></table></figure><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220720235302685.png" alt="image-20220720235302685"></p><h3 id="运行服务端"><a href="#运行服务端" class="headerlink" title="运行服务端"></a>运行服务端</h3><p>更改配置后，进入到~目录下，运行服务端.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./run  <span class="hljs-comment">#服务端程序开始运行</span><br></code></pre></td></tr></table></figure><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220720235745841.png" alt="image-20220720235745841"></p><p>服务端程序开始运行。</p><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220721003329057.png" alt="image-20220721003329057"></p><p>要等很久很久才能出现五个编码，等了近二十分钟（可能是因为1核1G的服务器不行）。</p><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220721004223577.png" alt="image-20220721004223577"></p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="解压客户端"><a href="#解压客户端" class="headerlink" title="解压客户端"></a>解压客户端</h3><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220721003758774.png" alt="image-20220721003758774"></p><p>解压客户端后如下</p><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220721004403017.png" alt="image-20220721004403017"></p><h3 id="Win10补丁"><a href="#Win10补丁" class="headerlink" title="Win10补丁"></a>Win10补丁</h3><p>然后解压win10补丁覆盖到客户端目录下面，不然win10下面不能玩。</p><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220721004316839.png" alt="image-20220721004316839"></p><h3 id="修改game-ini"><a href="#修改game-ini" class="headerlink" title="修改game.ini"></a>修改game.ini</h3><p>把Server和DBIP改为公网IP即可.</p><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220721004556858.png" alt="image-20220721004556858"></p><h3 id="启动游戏"><a href="#启动游戏" class="headerlink" title="启动游戏"></a>启动游戏</h3><p>点击地下城与勇士.exe启动游戏，点击左上角可以先注册账号。</p><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220721004450406.png" alt="image-20220721004450406"></p><h3 id="进入游戏"><a href="#进入游戏" class="headerlink" title="进入游戏"></a>进入游戏</h3><p>服务器列表为空，点击变更伺服器。</p><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220721004812420.png" alt="image-20220721004812420"></p><p>社区服为灰色，连续输入两次./stop，再输入一次./run，出现五国就可以了（我的服务器配置很低，出现五国也依然可能是灰色，咋搞都是灰色，但是隔了一天又可以了，后来发现这根本不是服务器的问题）。</p><h3 id="不能组队问题"><a href="#不能组队问题" class="headerlink" title="不能组队问题"></a>不能组队问题</h3><p>菜单 -》游戏设置 -》游戏模式，先改为单人模式保存然后再改回普通模式。</p><h2 id="服务器灰色原因"><a href="#服务器灰色原因" class="headerlink" title="服务器灰色原因"></a>服务器灰色原因</h2><p>服务器灰色原因网上解决办法有重启服务的各种操作，后来用了wireshark抓包看了一下，发现并不是这个原因。</p><h3 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h3><p>起初在百度云BBC服务器上搭建了一个私服，当天服务器一直是灰色的，第二天再次登录就正常了，网上都说是服务器问题（后经抓包发现是客户端问题）。</p><p>第三天又在VMware中搭建一个局域网的服务器，改掉game.ini为虚拟机内网ip。</p><p>从注册账号这里开始出现神奇的事情了，注册了一个和BBC服务器一模一样的账号密码，登录进去后，发现里面居然有在BBC服务器创建的人物。然后再创建一个新的账号（BBC服务器中不存在的账号），发现可以登录，但是在选择服务器时提示：<strong>因伺服器频道资料传输异常已断线。请稍后重行登入。</strong>这就说明登录走的是game.ini的配置（mysql配置），而拉取服务器时并没有使用Server配置的IP，而是使用了某个电脑中初始化的配置。</p><p>于是删除电脑中DNF的一些配置及缓存文件</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\a</span>dministrator<span class="hljs-symbol">\A</span>ppData<span class="hljs-symbol">\L</span>ocalLow<span class="hljs-symbol">\D</span>NF<br></code></pre></td></tr></table></figure><p>发现依然不可以使用。</p><p>最后发现，居然是在host文件中配置域名解析的IP地址。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">notepad C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\d</span>rivers<span class="hljs-symbol">\e</span>tc<span class="hljs-symbol">\h</span>osts<br></code></pre></td></tr></table></figure><p>把host文件中域名解析的IP地址改为内网IP即可。</p><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220723182958389.png" alt="image-20220723182958389"></p><h2 id="服务器更新"><a href="#服务器更新" class="headerlink" title="服务器更新"></a>服务器更新</h2><p>一共需要两个文件，一个是Script.pvf，一个是黑岩客户端文件。<br>1）先把黑岩客户端文件解压覆盖到原来客户端的文件里面，把Script.pvf也覆盖到客户端文件里。<br>2）把Script.pvf文件上传到服务端/home/neople/game下面。连上服务器，连续输入两次./stop，关闭服务器程序，再./run将启动服务。</p><h3 id="更改pvf文件"><a href="#更改pvf文件" class="headerlink" title="更改pvf文件"></a>更改pvf文件</h3><p>pvf中就是dnf的所有数据，可以用pvfUtility进行修改。</p><p><img src="/2022/07/21/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/image-20220721225816785.png" alt="image-20220721225816785"></p>]]></content>
    
    
    <categories>
      
      <category>game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>game</tag>
      
      <tag>伺服器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>V2ray+ws+tls+cdn搭建服务器</title>
    <link href="/2021/10/15/V2ray+ws+tls+cdn%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/10/15/V2ray+ws+tls+cdn%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>系统：CentOS7</p><p>WEB Server：Nginx</p><p>域名：namecheap（付费域名）/Freenom（免费域名，申请SSL证书须注意不能使用acme）</p><p>CND：Cloudflare</p><h2 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h2><p><a href="https://bandwagonhost.com/aff.php?aff=62182&gid=1">Bandwagonhost</a>购买VPS服务器并记录<strong>公网IP</strong>、<strong>SSH端口号</strong>及<strong>用户名密码</strong>。</p><p><img src="/2021/10/15/V2ray+ws+tls+cdn%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211027182429521.png" alt="image-20211027182429521"></p><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p><a href="https://www.namecheap.com/">Namecheap.com</a>官网购买域名，购买后<a href="https://www.namecheap.com/">配置域名指定到VPS的公网IP</a>（这里不配置的话，Cloudflare无法添加站点）。</p><p><img src="/2021/10/15/V2ray+ws+tls+cdn%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211027182000562.png" alt="image-20211027182000562"></p><h2 id="Cloudflare配置"><a href="#Cloudflare配置" class="headerlink" title="Cloudflare配置"></a>Cloudflare配置</h2><h3 id="添加域名站点"><a href="#添加域名站点" class="headerlink" title="添加域名站点"></a>添加域名站点</h3><p>进入<a href="https://www.cloudflare.com/">Cloudflare</a>官网，点击添加站点，输入申请的二级域名，Cloudflare会自动读取域名指向的公网IP并在CF上配置好A Record，这里一定要<strong>关掉Proxy</strong>，让小云朵变成灰色，不然待会TLS证书会申请失败。</p><p><img src="/2021/10/15/V2ray+ws+tls+cdn%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211027200003508.png" alt="image-20211027200003508"></p><p>点击继续，按照要求把原本的域名DNS Server改为Cloudflare的DNS Server。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">elsa.ns.cloudflare.com<br>javier.ns.cloudflare.com<br></code></pre></td></tr></table></figure><p><img src="/2021/10/15/V2ray+ws+tls+cdn%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211027184257352.png" alt="image-20211027184257352"></p><p>去域名供应商官网，更改DNS NAMESERVERS为Cloudflare的。</p><p><img src="/2021/10/15/V2ray+ws+tls+cdn%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211027185038138.png" alt="image-20211027185038138"></p><p>配置完成后去Cloudflare点击完成，检查名称服务器，这里需要等待十几分钟。</p><h3 id="whois"><a href="#whois" class="headerlink" title="whois"></a>whois</h3><p>下载链接：<a href="https://nirsoft.net/utils/whoiscl.zip">http://nirsoft.net/utils/whoiscl.zip</a></p><p>下载解压后，把WhoisCL.exe改名为 whois.exe 并复制到 C:\Windows\System32\目录下即可。</p><p>whois 域名，查看申请的域名。</p><p>未配置Cloudflare前，whois所有的信息。</p><p><img src="/2021/10/15/V2ray+ws+tls+cdn%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211027185954107.png" alt="image-20211027185954107"></p><p>使用cloudflare后，Name Server会变成Cloudflare的。</p><p><img src="/2021/10/15/V2ray+ws+tls+cdn%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211029111737416.png" alt="image-20211029111737416"></p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><h3 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install yum-utils<br></code></pre></td></tr></table></figure><h3 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入到yum源目录</span><br>cd /etc/yum.repos.d/<br><span class="hljs-meta">#</span><span class="bash"> 编辑nginx的yum源</span><br>vi nginx.repo<br></code></pre></td></tr></table></figure><p>添加<a href="http://nginx.org/en/linux_packages.html#RHEL-CentOS">源信息</a> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[nginx-stable]<br><span class="hljs-comment">#软件仓库的名称</span><br>name=nginx stable repo<br><span class="hljs-comment">#源的镜像服务器地址</span><br>baseurl=http://nginx.org/packages/centos/<span class="hljs-variable">$releasever</span>/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-comment">#是否启用此源 1:启用 0:禁用</span><br>enabled=1<br><span class="hljs-comment">#是否gpg验证 1:是 0:否</span><br>gpgcheck=0<br><span class="hljs-comment">#gpg验证key</span><br>gpgkey=https://nginx.org/keys/nginx_signing.key<br><br>[nginx-mainline]<br>name=nginx mainline repo<br>baseurl=http://nginx.org/packages/mainline/centos/<span class="hljs-variable">$releasever</span>/<span class="hljs-variable">$basearch</span>/<br>enabled=0<br>gpgcheck=1<br>gpgkey=https://nginx.org/keys/nginx_signing.key<br></code></pre></td></tr></table></figure><h3 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">查看源是否添加成功</span><br>yum search nginx<br><br><span class="hljs-meta">#</span><span class="bash">安装nginx</span><br>yum install nginx -y<br><br><span class="hljs-meta">#</span><span class="bash">安装完后，查看</span><br>rpm -qa | grep nginx <br><br><span class="hljs-meta">#</span><span class="bash">启动nginx</span><br>systemctl start nginx<br><br><span class="hljs-meta">#</span><span class="bash">加入开机启动</span><br>systemctl enable nginx<br><br><span class="hljs-meta">#</span><span class="bash">查看nginx的状态</span><br>systemctl status nginx<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动成功后浏览器输入IP:80即可访问nigix</p><p>lsof -i:80可查看80端口被那个进程占用。</p><h2 id="安装TLS证书"><a href="#安装TLS证书" class="headerlink" title="安装TLS证书"></a>安装TLS证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装必备软件包</span><br>yum install socat<br><span class="hljs-meta">#</span><span class="bash"> 安装acme.sh</span><br>curl  https://get.acme.sh | sh<br>source ~/.bashrc #执行后无反应<br><span class="hljs-meta">#</span><span class="bash"> 停止nginx</span><br>systemctl stop nginx<br></code></pre></td></tr></table></figure><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p><a href="https://github.com/acmesh-official/acme.sh/wiki/ZeroSSL.com-CA">acme使用ZeroSSL的CA证书</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 用邮箱注册zerossl账号</span><br>acme.sh  --register-account  -m EMAIL@example.com --server zerossl<br></code></pre></td></tr></table></figure><p><a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">获取CloudFlare API Key</a>，获取<a href="https://dash.cloudflare.com/profile/api-tokens">Global API Key</a>。</p><p><img src="/2021/10/15/V2ray+ws+tls+cdn%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211027191421089.png" alt="image-20211027191421089"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 设置Cloudflare的API Key</span><br>export CF_Key=&quot;ccxxxxxxxxxxxxxxxxxxxb&quot;<br>export CF_Email=&quot;xxxx@sss.com&quot;<br></code></pre></td></tr></table></figure><p>生成证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">acme.sh --server zerossl --issue  -d  YOURDOMAIN.COM --dns dns_cf<br></code></pre></td></tr></table></figure><p>证书生成成功</p><p><img src="/2021/10/15/V2ray+ws+tls+cdn%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211027191649288.png" alt="image-20211027191649288"></p><p>安装证书， 默认生成的证书都放在安装目录下: ~/.acme.sh/, 不要直接使用此目录下的文件， 正确的使用方法是使用 –installcert 命令,并指定目标位置, 然后证书文件会被copy到相应的位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">安装证书</span><br>sudo ~/.acme.sh/acme.sh --installcert -d MYDOMAIN --fullchainpath /etc/crt/autumn.crt --keypath /etc/crt/autumn.key<br></code></pre></td></tr></table></figure><h3 id="配置CF加密模式"><a href="#配置CF加密模式" class="headerlink" title="配置CF加密模式"></a>配置CF加密模式</h3><p>申请配置好之后，因为用CF做代理，所以要把SSL/TLS加密模式设为完全模式，<strong>端到端加密，使用服务器上的自签名证书</strong>。</p><p><img src="/2021/10/15/V2ray+ws+tls+cdn%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211030094847083.png" alt="image-20211030094847083"></p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>生成证书时，如果出现如下问题，原因是zerossl不再支持免费域名更换，需要更换为付费域名。<img src="/2021/10/15/V2ray+ws+tls+cdn%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211018155705467.png" alt="image-20211018155705467"></p><p>生成证书时如果遇到下面这个问题，需要去/root/.acme.sh下面把生成指定的证书删除干净。<img src="/2021/10/15/V2ray+ws+tls+cdn%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211029110026132.png" alt="image-20211029110026132"></p><h2 id="V2ray"><a href="#V2ray" class="headerlink" title="V2ray"></a>V2ray</h2><h3 id="安装V2ray"><a href="#安装V2ray" class="headerlink" title="安装V2ray"></a>安装V2ray</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install wget<br>wget --no-check-certificate -O v2ray.sh https://git.io/v2ray.sh<br>chmod +x v2ray.sh <br>./v2ray.sh 2&gt;&amp;1 | tee v2ray.log<br></code></pre></td></tr></table></figure><p>选择ws+tls</p><p><img src="/2021/10/15/V2ray+ws+tls+cdn%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211027201106804.png" alt="image-20211027201106804"></p><p>脚本会自动安装以下文件： /usr/bin/v2ray/v2ray：V2Ray 程序；</p><p>/usr/bin/v2ray/v2ctl：V2Ray 工具；</p><p>/etc/v2ray/config.json：配置文件；</p><p>/usr/bin/v2ray/geoip.dat：IP 数据文件</p><p>/usr/bin/v2ray/geosite.dat：域名数据文件</p><h3 id="修改V2ray配置"><a href="#修改V2ray配置" class="headerlink" title="修改V2ray配置"></a>修改V2ray配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/v2ray/config.json<br></code></pre></td></tr></table></figure><p>内容如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;log&quot;</span>: &#123;<br><span class="hljs-attr">&quot;access&quot;</span>: <span class="hljs-string">&quot;/var/log/v2ray/access.log&quot;</span>,<br><span class="hljs-attr">&quot;error&quot;</span>: <span class="hljs-string">&quot;/var/log/v2ray/error.log&quot;</span>,<br><span class="hljs-attr">&quot;loglevel&quot;</span>: <span class="hljs-string">&quot;warning&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;inbounds&quot;</span>: [<br>    &#123;<br>      &quot;port&quot;: 10000,  #端口和nginx代理的端口一致<br>      &quot;listen&quot;:&quot;127.0.0.1&quot;,  #只监听 127.0.0.1，避免除本机外的机器探测到端口,如果要所有机器检测到可以写0.0.0.0<br>      &quot;protocol&quot;: &quot;vmess&quot;,<br>      &quot;settings&quot;: &#123;<br>        &quot;clients&quot;: [<br>          &#123;<br>            &quot;id&quot;: &quot;b831381d-6324-4d53-ad4f-8cda48b30811&quot;, #uuid<br>            &quot;alterId&quot;: 64   #和客户端保持一致<br>          &#125;<br>        ]<br>      &#125;,<br>      &quot;streamSettings&quot;: &#123;<br>        &quot;network&quot;: &quot;ws&quot;,<br>        &quot;wsSettings&quot;: &#123;<br>        &quot;path&quot;: &quot;/video/&quot;       #注意：和Nginx中配置一致，两个斜杠不能省略<br>        &#125;<br>      &#125;<br>    &#125;<br>  ],<br>  &quot;outbounds&quot;: [<br>    &#123;<br>      <span class="hljs-attr">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;freedom&quot;</span>,<br>      <span class="hljs-attr">&quot;settings&quot;</span>: &#123;&#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="v2ray常用命令"><a href="#v2ray常用命令" class="headerlink" title="v2ray常用命令"></a>v2ray常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">v2ray info //查看 V2Ray 配置信息<br>v2ray config //修改 V2Ray 配置<br>v2ray link //生成 V2Ray 配置文件链接<br>v2ray infolink //生成 V2Ray 配置信息链接<br>v2ray qr //生成 V2Ray 配置二维码链接<br>v2ray ss //修改 Shadowsocks 配置<br>v2ray ssinfo //查看 Shadowsocks 配置信息<br>v2ray ssqr //生成 Shadowsocks 配置二维码链接<br>v2ray status //查看 V2Ray 运行状态<br>v2ray start //启动 V2Ray<br>v2ray stop //停止 V2Ray<br>v2ray restart //重启 V2Ray<br>v2ray <span class="hljs-built_in">log</span> //查看 V2Ray 运行日志<br>v2ray update //更新 V2Ray<br>v2ray update.sh //更新 V2Ray 管理脚本<br>v2ray uninstall //卸载 V2Ray<br></code></pre></td></tr></table></figure><h2 id="Nginx配置TLS和V2ray"><a href="#Nginx配置TLS和V2ray" class="headerlink" title="Nginx配置TLS和V2ray"></a>Nginx配置TLS和V2ray</h2><p>为Nginx配置tls证书和V2ray代理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/nginx/nginx.conf<br></code></pre></td></tr></table></figure><p>内容如下:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json">#pid 需要mkdir /usr/local/nginx/logs -p 否则不能开机自启<br>#pid /usr/local/nginx/logs/nginx.pid;   #yum安装的不需要<br><br>http &#123;<br>server &#123;<br>  listen  443 ssl;<br>  #如果systemctl status nginx.service报错nginx: [warn] the &quot;ssl&quot; directive is deprecated, use the &quot;listen ... ssl&quot; directive instead,需要删除ssl on<br>  ssl on;    <br>  ssl_certificate       /etc/crt/autumn.crt;   #这里根据安装的证书路径填写,非fullchain路径<br>  ssl_certificate_key   /etc/crt/autumn.key;   #这里根据安装的证书路径填写<br>  ssl_protocols         TLSv1 TLSv1.1 TLSv1.2;<br>  ssl_ciphers           HIGH:!aNULL:!MD5;<br>  server_name           DOMAIN;     #域名<br>location /video/ &#123;    #与V2Ray服务端 配置中的 path 保持一致<br>proxy_redirect off;<br>proxy_pass http://127.0.0.1:10000;  #这个端口和服务端保持一致<br>proxy_http_version 1.1;<br>proxy_set_header Upgrade $http_upgrade;<br>proxy_set_header Connection &quot;upgrade&quot;;<br>proxy_set_header Host $http_host;<br><br># Show realip in v2ray access.log<br>proxy_set_header X-Real-IP $remote_addr;<br>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后启动nginx即可，如果IP被Ban了记得把Cloudflare的Proxy打开。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#启动nginx</span><br>systemctl start nginx<br>v2ray url<br></code></pre></td></tr></table></figure><p>配置完后先检查配置文件有无问题.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#检查配置文件，出现nginx: invalid option: &quot;/etc/nginx/nginx.conf&quot;问题依然可以启动nginx</span><br>nginx -t /etc/nginx/nginx.conf<br><br><span class="hljs-comment">#查看端口调用情况</span><br>lsof -i:443<br><br><span class="hljs-comment">#使用指定的配置文件而不是conf目录下的nginx.conf</span><br><span class="hljs-comment"># nginx -c &lt;path_to_config&gt;</span><br></code></pre></td></tr></table></figure><h2 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查找服务的日志</span><br>lsof -p 进程ID|grep <span class="hljs-built_in">log</span><br><br><span class="hljs-comment">#查看nginx的error日志</span><br><span class="hljs-comment">#104: Connection reset by peer连接重置是正常情况</span><br>tail -f /var/<span class="hljs-built_in">log</span>/nginx/error.log<br><br><span class="hljs-comment">#查看nginx的access日志</span><br><span class="hljs-comment">#代理成功后连接时会带有101状态码(Switching Protocols，切换协议)</span><br><span class="hljs-comment">#成功示例: &quot;GET /video/ HTTP/1.1&quot; 101 0 &quot;-&quot; &quot;Go-http-client/1.1&quot;</span><br>tail -f /var/<span class="hljs-built_in">log</span>/nginx/access.log<br><br><span class="hljs-comment">#查看v2ray的access日志</span><br><span class="hljs-comment">#代理成功后,nginx会把请求转发给v2ray</span><br><span class="hljs-comment">#成功示例: tcp:61.YOUR.IP.ADDRRESS:30862 accepted tcp:www.baidu.com:443</span><br>tail -f /var/<span class="hljs-built_in">log</span>/v2ray/access.log<br><br><span class="hljs-comment">#查看v2ray的error日志</span><br><span class="hljs-comment">#v2ray.com/core/app/proxyman/inbound: connection ends连接关闭时正常情况</span><br>tail -f /var/<span class="hljs-built_in">log</span>/v2ray/error.log<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>VPN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VPN</tag>
      
      <tag>V2ray</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建Trojan服务器</title>
    <link href="/2021/09/27/%E6%90%AD%E5%BB%BATrojan%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/09/27/%E6%90%AD%E5%BB%BATrojan%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>系统：CentOS7</p><p>官网：<a href="https://github.com/Jrohy/trojan">https://github.com/Jrohy/trojan</a></p><h2 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">安装/更新</span><br>source &lt;(curl -sL https://git.io/trojan-install)<br><br><span class="hljs-meta">#</span><span class="bash">卸载</span><br>source &lt;(curl -sL https://git.io/trojan-install) --remove<br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#trojan管理</span></span><br>trojan<br></code></pre></td></tr></table></figure><p>安装过程中输入域名，自动生成证书。</p><p><img src="/2021/09/27/%E6%90%AD%E5%BB%BATrojan%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20210927173218010.png" alt="image-20210927173218010"></p><h2 id="Torjan-Web端"><a href="#Torjan-Web端" class="headerlink" title="Torjan Web端"></a>Torjan Web端</h2><p>https://域名</p><p>输入刚才设置的web的admin密码，进入后可以用web管理用户。</p><p><img src="/2021/09/27/%E6%90%AD%E5%BB%BATrojan%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20210927173355184.png" alt="image-20210927173355184"></p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>依然使用V2rayN，但是要使用高版本<a href="https://github.com/2dust/v2rayN/releases">V2rayN v4.20</a>，V2rayN还需要单独下载内核<a href="https://github.com/v2fly/v2ray-core/releases">v2ray-core v4.42.2</a>。</p><p><img src="/2021/09/27/%E6%90%AD%E5%BB%BATrojan%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20210928161626546.png" alt="image-20210928161626546"></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="tcp干扰"><a href="#tcp干扰" class="headerlink" title="tcp干扰"></a>tcp干扰</h3><p>用的好好的，突然不能翻墙了（Trojan的管理web依然可以访问登录、SSH可以直接连接），除此之外都正常（排除域名污染、IP被墙）。</p><p><img src="/2021/09/27/%E6%90%AD%E5%BB%BATrojan%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211008222742934.png" alt="image-20211008222742934"></p><p>再次测试，Trojan服务端无任何反应，服务端日志中没有打印任何东西，查看<a href="https://kiwivm.64clouds.com/main-exec.php?mode=blacklistcheck">搬瓦工GFW检测</a>，发现IP Blocked（应该是TCP阻断/干扰，443端口可以访问web但是不能翻墙）。</p><p><img src="/2021/09/27/%E6%90%AD%E5%BB%BATrojan%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211015150351360.png" alt="image-20211015150351360"></p><p>下载<a href="https://elifulkerson.com/projects/tcping.php">TCPing</a>，用tcping ip 443验证一下，果然不行。</p><p><img src="/2021/09/27/%E6%90%AD%E5%BB%BATrojan%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20211015152057157.png" alt="image-20211015152057157"></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>Goflyway的WS+CDN模式 和 V2ray 的WS+CDN模式。</p><h2 id="GFW"><a href="#GFW" class="headerlink" title="GFW"></a>GFW</h2><h3 id="TCP封锁-阻断"><a href="#TCP封锁-阻断" class="headerlink" title="TCP封锁(阻断)"></a><strong>TCP封锁(阻断)</strong></h3><p>服务器 IP 被TCP封锁(阻断)后，依然可以正常的<strong>向海外代理服务器发送数据</strong>（客户端连接服务端），但是海外代理服务器上的代理服务端在<strong>向你返回数据</strong>的时候，肯定是要经过墙的，而墙发现发送者IP(代理服务器)在黑名单中，于是就会<strong>阻断、拦截</strong>，这样你的<strong>客户端就收不到来自服务端的返回数据</strong>了（SSR上表现为：超时或空连）。</p><p>而目前的代理软件基本都是使用 TCP 协议传输的，而TCP协议要传输数据，则先要进行握手环节，而握手自然要有来有回，所以当<strong>墙对海外代理服务器回程TCP阻断</strong>的时候，就会导致<strong>代理客户端与服务端无法完成握手</strong>，自然也无法使用代理了。</p>]]></content>
    
    
    <categories>
      
      <category>VPN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VPN</tag>
      
      <tag>Torjan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACR122破解IC卡</title>
    <link href="/2021/07/22/ACR122%E7%A0%B4%E8%A7%A3IC%E5%8D%A1/"/>
    <url>/2021/07/22/ACR122%E7%A0%B4%E8%A7%A3IC%E5%8D%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><p>安装驱动版本ACR122U<a href="https://wwr.lanzoui.com/iZ0Gbrq406d">驱动V1.1.5</a></p><p><img src="/2021/07/22/ACR122%E7%A0%B4%E8%A7%A3IC%E5%8D%A1/image-20210722161928124.png" alt="image-20210722161928124"></p><p>安装完后把读卡器拔掉重连，计算机管理 -》设备管理 中出现读卡器型号即为成功。</p><p><img src="/2021/07/22/ACR122%E7%A0%B4%E8%A7%A3IC%E5%8D%A1/image-20210722162118855.png" alt="image-20210722162118855"></p><h2 id="UID克隆工具破解IC卡"><a href="#UID克隆工具破解IC卡" class="headerlink" title="UID克隆工具破解IC卡"></a>UID克隆工具破解IC卡</h2><p><img src="/2021/07/22/ACR122%E7%A0%B4%E8%A7%A3IC%E5%8D%A1/image-20210722162259743.png" alt="image-20210722162259743"></p><h3 id="破解并导出dump"><a href="#破解并导出dump" class="headerlink" title="破解并导出dump"></a>破解并导出dump</h3><p>把卡放上去，点击开始破解，出现破解完成即可。</p><p><img src="/2021/07/22/ACR122%E7%A0%B4%E8%A7%A3IC%E5%8D%A1/image-20210722162343245.png" alt="image-20210722162343245"></p><p>破解成功之后，卡的dump数据就已经被导出了。</p><p><img src="/2021/07/22/ACR122%E7%A0%B4%E8%A7%A3IC%E5%8D%A1/image-20210722163102292.png" alt="image-20210722163102292"></p><h3 id="dump导入白卡"><a href="#dump导入白卡" class="headerlink" title="dump导入白卡"></a>dump导入白卡</h3><p>打开UID卡克隆软件.exe</p><p><img src="/2021/07/22/ACR122%E7%A0%B4%E8%A7%A3IC%E5%8D%A1/image-20210722163236847.png" alt="image-20210722163236847"></p><p>连接读卡器 -&gt; 连接卡片 -&gt; 导入文件(选择刚才破解时导出的dump) -&gt; 点击写卡，即可把数据写入其中。</p><h2 id="卡匠破解IC卡"><a href="#卡匠破解IC卡" class="headerlink" title="卡匠破解IC卡"></a>卡匠破解IC卡</h2><p><img src="/2021/07/22/ACR122%E7%A0%B4%E8%A7%A3IC%E5%8D%A1/image-20210722165615656.png" alt="image-20210722165615656"></p><h3 id="破解并导出dump-1"><a href="#破解并导出dump-1" class="headerlink" title="破解并导出dump"></a>破解并导出dump</h3><p>打开卡匠M1密钥分析器.exe，破解秘钥并导出，一定要选择保存路径，将导出的dump数据放在指定的文件夹下面。</p><p><img src="/2021/07/22/ACR122%E7%A0%B4%E8%A7%A3IC%E5%8D%A1/image-20210722165740978.png" alt="image-20210722165740978"></p><h3 id="dump导入白卡-1"><a href="#dump导入白卡-1" class="headerlink" title="dump导入白卡"></a>dump导入白卡</h3><p>打开卡匠M1复制克隆工具.exe，将数据导出到白卡上。</p><p><img src="/2021/07/22/ACR122%E7%A0%B4%E8%A7%A3IC%E5%8D%A1/image-20210722165848878.png" alt="image-20210722165848878"></p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><h4 id="数据复制-普通卡"><a href="#数据复制-普通卡" class="headerlink" title="数据复制(普通卡)"></a>数据复制(普通卡)</h4><p>写入除了UID（0号块）之外的63个块的数据。</p><h4 id="克隆卡片-特种IC卡"><a href="#克隆卡片-特种IC卡" class="headerlink" title="克隆卡片(特种IC卡)"></a>克隆卡片(特种IC卡)</h4><p>卡片克隆用于完全克隆IC卡（带UID也一起克隆），需要可改写UID的特种IC卡。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 点击“克隆卡片”按钮，IC卡读写器红灯开始闪烁，开始克隆卡片； <br><span class="hljs-bullet">2.</span> 当IC卡读写器绿灯亮起时，说明克隆过程结束，此时查看操作日志，如无错误则说明克隆操作成功。<br></code></pre></td></tr></table></figure><p>克隆卡操作与复制卡操作的区别在于：</p><p>1、使用的卡片不同：复制卡使用新的普通的IC卡，克隆卡使用可改写UID的特种IC卡。</p><p>2、结果不同：复制卡是将除0扇区0块以外的数据，全部写入新的普<br>通的IC卡中，得到一张与原卡数据相同，但UID号不同的卡。而克隆卡是连同0扇区0块的数据在内，全部写入可改写UID的特种IC卡中，得到一张与原卡完全一样的（包括UID号）卡。</p><h4 id="卡片还原-普通卡"><a href="#卡片还原-普通卡" class="headerlink" title="卡片还原(普通卡)"></a>卡片还原(普通卡)</h4><p>此功能仅对普通IC卡有效，请勿对可改写UID的特种卡使<br>用本功能！此功能用于将已经写入数据的卡中数据清空，并将所有扇区密码改成12个F。使用此功能时，按照以下步骤操作： </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 使用Mifare密钥分析器软件，对需要清空数据的卡进行数据分析； <br><span class="hljs-bullet">2.</span> 将分析得到的数据文件导入到Mifare卡复制克隆工具中；<br><span class="hljs-bullet">3.</span> 点击“卡片还原”按钮，当IC卡读写器绿灯亮起时，说明还原过程结束，此时查看操作日志，如无错误则说明操作成功； <br><span class="hljs-bullet">4.</span> 如需要验证卡内数据是否被清空，可以导入“空白卡.dump”，然后点击“卡片校检”，予以验证。<br></code></pre></td></tr></table></figure><h4 id="卡片校验"><a href="#卡片校验" class="headerlink" title="卡片校验"></a>卡片校验</h4><p>卡片校检：此功能用于验证卡中数据与“原卡数据”区内的数据是否相符。</p>]]></content>
    
    
    <categories>
      
      <category>破解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>破解</tag>
      
      <tag>IC卡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx+ffmpeg+java+hls+videojs实现RTSP转HLS</title>
    <link href="/2021/06/03/Nginx-ffmpeg-java-hls-videojs%E5%AE%9E%E7%8E%B0RTSP%E8%BD%ACHLS/"/>
    <url>/2021/06/03/Nginx-ffmpeg-java-hls-videojs%E5%AE%9E%E7%8E%B0RTSP%E8%BD%ACHLS/</url>
    
    <content type="html"><![CDATA[<h2 id="安装Nginx和nginx-rtmp-module"><a href="#安装Nginx和nginx-rtmp-module" class="headerlink" title="安装Nginx和nginx-rtmp-module"></a>安装Nginx和nginx-rtmp-module</h2><h3 id="安装make等命令"><a href="#安装make等命令" class="headerlink" title="安装make等命令"></a>安装make等命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install gcc automake autoconf libtool make<br>yum install wget<br>yum install unzip<br></code></pre></td></tr></table></figure><h3 id="下载nginx-rtmp-module"><a href="#下载nginx-rtmp-module" class="headerlink" title="下载nginx-rtmp-module"></a>下载nginx-rtmp-module</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir ~/module     <span class="hljs-comment"># 创建下载module的文件夹</span><br><span class="hljs-built_in">cd</span> ~/module<br>wget https://github.com/arut/nginx-rtmp-module/archive/master.zip        <span class="hljs-comment"># 下载模块</span><br>unzip master.zip      <span class="hljs-comment"># 解压</span><br></code></pre></td></tr></table></figure><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /<br>yum -y install pcre-devel openssl openssl-devel  <span class="hljs-comment">#安装依赖包</span><br>wget http://nginx.org/download/nginx-1.12.2.tar.gz   <span class="hljs-comment">#下载nginx包</span><br>tar -zxvf nginx-1.12.2.tar.gz<br><span class="hljs-built_in">cd</span> nginx-1.12.2<br>./configure --prefix=/opt/nginx-1.12.2 --with-http_stub_status_module --add-module=/root/module/nginx-rtmp-module-master --with-http_ssl_module    <span class="hljs-comment">#--prefix=/opt/nginx-1.12.2为安装位置</span><br>make<br>make install<br></code></pre></td></tr></table></figure><h2 id="修改nginx配置"><a href="#修改nginx配置" class="headerlink" title="修改nginx配置"></a>修改nginx配置</h2><h3 id="rtsp转rtmp配置"><a href="#rtsp转rtmp配置" class="headerlink" title="rtsp转rtmp配置"></a>rtsp转rtmp配置</h3><p>vi /opt/nginx-1.12.2/conf/nginx.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">rtmp &#123;<br>   <span class="hljs-comment"># 转流服务,可以存在多个,每个服务端口要不同</span><br>   server &#123;<br>     listen 1935;<br>     application myapp&#123;    <span class="hljs-comment">#应用名,可以存在多个</span><br>        live on;<br>        record off;<br>        allow play all;<br>     &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/06/03/Nginx-ffmpeg-java-hls-videojs%E5%AE%9E%E7%8E%B0RTSP%E8%BD%ACHLS/1208477-20210602150731270-1534136293.png" alt="image"></p><p>rtmp协议和http协议是同为应用层的不同协议，rtmp配置需要写在http外面同级。</p><h3 id="rtsp转hls配置"><a href="#rtsp转hls配置" class="headerlink" title="rtsp转hls配置"></a>rtsp转hls配置</h3><p>在http配置中添加如下，直接把m3u8和切片文件放入nginx/hls文件夹下即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>  listen       8002;<br>  server_name  server_hls;<br><br>  location / &#123;<br>    types &#123;<br>       application/vnd.apple.mpegusr m3u8;<br>       video/mp2t ts;<br>    &#125;<br>    root hls;    <span class="hljs-comment">#8002端口服务的根目录,nginx目录下的hls目录</span><br>    add_header Cache-Control no-cache;<br>    add_header Access-Control-Allow-Origin *;<br>    add_header Access-Control-Allow-Headers <span class="hljs-string">&quot;Origin, X-Requested-With,      Content-Type, Accept&quot;</span>;<br>    add_header Access-Control-Methods <span class="hljs-string">&quot;GET, POST, OPTIONS&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/06/03/Nginx-ffmpeg-java-hls-videojs%E5%AE%9E%E7%8E%B0RTSP%E8%BD%ACHLS/1208477-20210602150925361-417100890.png" alt="image"></p><h3 id="重新载入nginx"><a href="#重新载入nginx" class="headerlink" title="重新载入nginx"></a>重新载入nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/opt/nginx-1.9.5/sbin/nginx -s reload<br></code></pre></td></tr></table></figure><p>出现如下问题,没有nginx.pid<br>nginx: [error] open() “/opt/nginx-1.12.2/logs/nginx.pid” failed (2: No such file or directory)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/opt/nginx-1.9.5/sbin/nginx -c /opt/nginx-1.9.5/conf/nginx.conf<br></code></pre></td></tr></table></figure><p><img src="/2021/06/03/Nginx-ffmpeg-java-hls-videojs%E5%AE%9E%E7%8E%B0RTSP%E8%BD%ACHLS/1208477-20210602095644691-1626029173.png" alt="image"></p><h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/opt/nginx-1.9.5/sbin/nginx<br>/opt/nginx-1.9.5/sbin/nginx -s stop<br></code></pre></td></tr></table></figure><p><img src="/2021/06/03/Nginx-ffmpeg-java-hls-videojs%E5%AE%9E%E7%8E%B0RTSP%E8%BD%ACHLS/1208477-20210602095944351-1624208242.png" alt="image"></p><h2 id="安装FFmpeg"><a href="#安装FFmpeg" class="headerlink" title="安装FFmpeg"></a>安装FFmpeg</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install yasm -y   <span class="hljs-comment">#安装依赖,自动不行就手动</span><br><span class="hljs-built_in">cd</span> /opt<br>git <span class="hljs-built_in">clone</span> https://git.ffmpeg.org/ffmpeg.git ffmpeg  <span class="hljs-comment">#下载ffmpeg</span><br><span class="hljs-built_in">cd</span> ffmpeg<br>./configure --prefix=/usr/<span class="hljs-built_in">local</span>/ffmpeg<br>make<br>make install<br></code></pre></td></tr></table></figure><h3 id="手动安装依赖yasm"><a href="#手动安装依赖yasm" class="headerlink" title="手动安装依赖yasm"></a>手动安装依赖yasm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz<br>tar zxvf yasm-1.3.0.tar.gz<br><span class="hljs-built_in">cd</span> yasm-1.3.0<br>./configure<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h3 id="拷贝命令到-usr-bin"><a href="#拷贝命令到-usr-bin" class="headerlink" title="拷贝命令到/usr/bin"></a>拷贝命令到/usr/bin</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ls /usr/<span class="hljs-built_in">local</span>/ffmpeg/<br>bin    include    lib    share<br>cp /usr/<span class="hljs-built_in">local</span>/ffmpeg/bin/*   /usr/bin/<br></code></pre></td></tr></table></figure><p><img src="/2021/06/03/Nginx-ffmpeg-java-hls-videojs%E5%AE%9E%E7%8E%B0RTSP%E8%BD%ACHLS/1208477-20210602093711522-371795684.png" alt="image"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="RTSP转RTMP"><a href="#RTSP转RTMP" class="headerlink" title="RTSP转RTMP"></a>RTSP转RTMP</h3><p>rtsp地址为源地址，rtmp后面为Nginx视频服务器的ip+Nginx配置的1935端口/application名/视频名</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -rtsp_transport tcp  -i rtsp://wowzaec<span class="hljs-number">2</span>demo.streamlock.net/vod/mp<span class="hljs-number">4</span>:BigBuckBunny_<span class="hljs-number">115</span>k.mov -acodec aac -strict experimental -ar <span class="hljs-number">44100</span> -ac <span class="hljs-number">2</span> -b:a <span class="hljs-number">96</span>k -r <span class="hljs-number">25</span> -b:v <span class="hljs-number">500</span>k -s <span class="hljs-number">640</span>*<span class="hljs-number">480</span> -f flv rtmp://<span class="hljs-number">222.222.221.188:1935</span>/myapp/<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p><img src="/2021/06/03/Nginx-ffmpeg-java-hls-videojs%E5%AE%9E%E7%8E%B0RTSP%E8%BD%ACHLS/1208477-20210602103234658-1749735345.png" alt="image"></p><p>在vlc中打开转换后的rtmp地址<br>rtmp://222.222.221.188:1935/myapp/23</p><p><img src="/2021/06/03/Nginx-ffmpeg-java-hls-videojs%E5%AE%9E%E7%8E%B0RTSP%E8%BD%ACHLS/1208477-20210602103326406-125410911.png" alt="image"></p><p><img src="/2021/06/03/Nginx-ffmpeg-java-hls-videojs%E5%AE%9E%E7%8E%B0RTSP%E8%BD%ACHLS/1208477-20210602103451697-370688254.png" alt="image"></p><h3 id="RTSP转HLS"><a href="#RTSP转HLS" class="headerlink" title="RTSP转HLS"></a>RTSP转HLS</h3><p>HLS (HTTP Live Streaming)是Apple的动态码率自适应技术。主要用于PC和Apple终端的音视频服务。包括一个m3u(8)的索引文件，TS媒体分片文件和key加密串文件。<br>在上文nginx中/hls的root部分配置了html路径，对应nginx目录下的html文件夹，用于存储m3u8文件及ts文件<br>此时ffmpeg的命令使用,将在nginx/hls文件夹生成test.m3u8文及切片视频。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -f rtsp -rtsp_transport tcp -i rtsp://wowzaec<span class="hljs-number">2</span>demo.streamlock.net/vod/mp<span class="hljs-number">4</span>:BigBuckBunny_<span class="hljs-number">115</span>k.mov -codec copy -f hls -hls_list_size <span class="hljs-number">10</span> -hls_wrap <span class="hljs-number">20</span> -hls_time <span class="hljs-number">15</span>  /opt/nginx-<span class="hljs-number">1</span>.<span class="hljs-number">9</span>.<span class="hljs-number">5</span>/hls/test.m<span class="hljs-number">3</span>u<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p><img src="/2021/06/03/Nginx-ffmpeg-java-hls-videojs%E5%AE%9E%E7%8E%B0RTSP%E8%BD%ACHLS/1208477-20210602151437293-723366573.png" alt="image"></p><p>vlc中输入<a href="http://222.222.221.188:8002/test.m3u8">http://222.222.221.188:8002/test.m3u8</a><br>vlc不播放时，在浏览器输入地址看看是否可以直接下载m3u8文件，如果不能下载检查nginx根目录下hls文件夹内是否生成文件,如果已经生成检查conf/nginx.conf配置文件是否配置正确。</p><p><img src="/2021/06/03/Nginx-ffmpeg-java-hls-videojs%E5%AE%9E%E7%8E%B0RTSP%E8%BD%ACHLS/1208477-20210602151515959-1317822291.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>视频流</category>
      
    </categories>
    
    
    <tags>
      
      <tag>视频流</tag>
      
      <tag>rtsp</tag>
      
      <tag>rtmp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器通过协议调用应用</title>
    <link href="/2021/05/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%80%9A%E8%BF%87%E5%8D%8F%E8%AE%AE%E8%B0%83%E7%94%A8%E5%BA%94%E7%94%A8/"/>
    <url>/2021/05/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%80%9A%E8%BF%87%E5%8D%8F%E8%AE%AE%E8%B0%83%E7%94%A8%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="查看协议和文件类型的默认应用"><a href="#查看协议和文件类型的默认应用" class="headerlink" title="查看协议和文件类型的默认应用"></a>查看协议和文件类型的默认应用</h2><p>Win + I -&gt; 应用 -&gt; 默认应用，按协议指定默认应用。<br><img src="/2021/05/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%80%9A%E8%BF%87%E5%8D%8F%E8%AE%AE%E8%B0%83%E7%94%A8%E5%BA%94%E7%94%A8/1208477-20210525145447189-322717285.png" alt="image"><br>可以看到有些程序自定义协议在里面，并且可以设置打开此协议的程序，但是并没有发现可以新增协议。只能通过注册表来解决。<br><img src="/2021/05/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%80%9A%E8%BF%87%E5%8D%8F%E8%AE%AE%E8%B0%83%E7%94%A8%E5%BA%94%E7%94%A8/1208477-20210525145619019-1811153384.png" alt="image"></p><h2 id="自定义浏览器协议"><a href="#自定义浏览器协议" class="headerlink" title="自定义浏览器协议"></a>自定义浏览器协议</h2><p>chrome浏览器用到了自定义浏览器协议这一标准。自定义浏览器协议允许在浏览器中使用protocol://url<br>的形式进行调用本地程序。包括在网页上拉起百度云网盘、或者拉起QQ等等，都属于自定义浏览器协议。</p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>在通过浏览器调用外部程序时，浏览器会在我们本地的注册表中查找协议所对应的注册表，并获取实际要调用的程序路径进行调用。<br>例如</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rtsp:<span class="hljs-regexp">//</span>callback/?id=opaqueInternalAccesssObj<br></code></pre></td></tr></table></figure><p>rtsp://为我们自定义的浏览器协议，后面的callback/?id=opaqueInternalAccessObj则为实际传入的参数</p><h2 id="注册表解析"><a href="#注册表解析" class="headerlink" title="注册表解析"></a>注册表解析</h2><p>新建一个rtsp.reg文件，输入如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">Windows Registry Editor Version 5.00<br><br>[HKEY_CLASSES_ROOT\rtsp]<br>@=<span class="hljs-string">&quot;RTSPLoader Plugin&quot;</span><br><span class="hljs-string">&quot;URL Protocol&quot;</span>=<span class="hljs-string">&quot;C:\\Program Files\\VideoLAN\\VLC\\vlc.exe&quot;</span><br><br>[HKEY_CLASSES_ROOT\rtsp\shell]<br><br>[HKEY_CLASSES_ROOT\rtsp\shell\open]<br><br>[HKEY_CLASSES_ROOT\rtsp\shell\open\<span class="hljs-built_in">command</span>]<br>@=<span class="hljs-string">&quot;C:\\Program Files\\VideoLAN\\VLC\\vlc.exe %1&quot;</span><br></code></pre></td></tr></table></figure><p>双击运行后在浏览器中输入rtsp://后会提示是否打开RTSPLoader Plugin(实则是打开Windows Shell)。</p><h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><ol><li><p>[HKEY_CLASSES_ROOT] 是应用程序运行时必须的信息，[HKEY_CLASSES_ROOT\rtsp]表示在该注册表目录下生成了一个rtsp的应用程序运行时必须的信息。<br>@=为该应用程序默认名称，用来显示程序名称，不填则为exe名称。<br>URL Protocol=为该协议所要调用的程序地址。</p></li><li><p>[HKEY_CLASSES_ROOT\rtsp\shell]在rtsp\下生成shell目录。</p></li><li><p>[HKEY_CLASSES_ROOT\rtsp\shell\open]在rtsp\shell\下生成open目录。</p></li><li><p>[HKEY_CLASSES_ROOT\rtsp\shell\open\command]在rtsp\shell\open\下生成command目录，@=在command目录下新建一个默认值为协议调用程序的实际路径。%1代表rtsp://后面跟的参数。</p></li></ol><h2 id="注册表效果"><a href="#注册表效果" class="headerlink" title="注册表效果"></a>注册表效果</h2><p>输入地址： 计算机\HKEY_CLASSES_ROOT\rtsp，可以看到调用rtsp的程序名设置，和调用rtsp协议的默认程序(URL Protocol)</p><p><img src="/2021/05/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%80%9A%E8%BF%87%E5%8D%8F%E8%AE%AE%E8%B0%83%E7%94%A8%E5%BA%94%E7%94%A8/1208477-20210525144519114-1220165044.png" alt="image"></p><p>最终执行命令及参数</p><p><img src="/2021/05/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%80%9A%E8%BF%87%E5%8D%8F%E8%AE%AE%E8%B0%83%E7%94%A8%E5%BA%94%E7%94%A8/1208477-20210525144500800-914229097.png" alt="image"></p><p>点击页面的rtsp超链接，提示用VLC media player打开。</p><p><img src="/2021/05/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%80%9A%E8%BF%87%E5%8D%8F%E8%AE%AE%E8%B0%83%E7%94%A8%E5%BA%94%E7%94%A8/1208477-20210525145038916-131635117.png" alt="image"><br><img src="/2021/05/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%80%9A%E8%BF%87%E5%8D%8F%E8%AE%AE%E8%B0%83%E7%94%A8%E5%BA%94%E7%94%A8/1208477-20210525144937946-155745317.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CE查找基址</title>
    <link href="/2021/05/19/CE%E6%9F%A5%E6%89%BE%E5%9F%BA%E5%9D%80/"/>
    <url>/2021/05/19/CE%E6%9F%A5%E6%89%BE%E5%9F%BA%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h2 id="CE"><a href="#CE" class="headerlink" title="CE"></a>CE</h2><h3 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h3><p><a href="https://www.cheatengine.org/downloads.php">https://www.cheatengine.org/downloads.php</a></p><h3 id="查找精确值"><a href="#查找精确值" class="headerlink" title="查找精确值"></a>查找精确值</h3><p>先根据阳光值去First Scan，然后消耗游戏阳光值Next Scan，最后筛选出阳光值地址。</p><p><img src="/2021/05/19/CE%E6%9F%A5%E6%89%BE%E5%9F%BA%E5%9D%80/Snipaste_2021-03-22_01-15-22.png" alt="Snipaste_2021-03-22_01-15-22"></p><h3 id="查找偏移量"><a href="#查找偏移量" class="headerlink" title="查找偏移量"></a>查找偏移量</h3><h4 id="查找偏移量和上一个地址"><a href="#查找偏移量和上一个地址" class="headerlink" title="查找偏移量和上一个地址"></a>查找偏移量和上一个地址</h4><p>点击Find out what accesses this address，找出什么访问了这个地址。</p><p><img src="/2021/05/19/CE%E6%9F%A5%E6%89%BE%E5%9F%BA%E5%9D%80/Snipaste_2021-03-22_01-18-02.png" alt="Snipaste_2021-03-22_01-15-22"></p><p>随便点击一个汇编指令，点击More information显示可能的地址为27CBAC88，记录偏移量0x5578。</p><p><img src="/2021/05/19/CE%E6%9F%A5%E6%89%BE%E5%9F%BA%E5%9D%80/Snipaste_2021-03-22_01-25-48.png" alt="Snipaste_2021-03-22_01-15-22"></p><h4 id="检索地址"><a href="#检索地址" class="headerlink" title="检索地址"></a>检索地址</h4><p>把上一个地址复制出来27CBAC88，然后去检索，双击添加前十个后F5查看。</p><p><img src="/2021/05/19/CE%E6%9F%A5%E6%89%BE%E5%9F%BA%E5%9D%80/Snipaste_2021-03-22_01-33-08.png" alt="Snipaste_2021-03-22_01-15-22"></p><h4 id="查找正确的地址"><a href="#查找正确的地址" class="headerlink" title="查找正确的地址"></a>查找正确的地址</h4><p>找到<strong>大量mov和cmp</strong>命令的，并且<strong>偏移量全部统一</strong>的。复制地址02A0B288，记录偏移量0x868。</p><p><img src="/2021/05/19/CE%E6%9F%A5%E6%89%BE%E5%9F%BA%E5%9D%80/Snipaste_2021-03-22_01-41-47.png" alt="Snipaste_2021-03-22_01-15-22"></p><h3 id="查到基址"><a href="#查到基址" class="headerlink" title="查到基址"></a>查到基址</h3><p>持续查找地址，记录偏移量知道发现绿色地址，检索02A0B288地址时发现出现<strong>绿色的地址</strong>（即为基址），全部双击加入后F5查看，发现偏移量和地址为同一个值，所以这个007794F8即为基址。</p><p><img src="/2021/05/19/CE%E6%9F%A5%E6%89%BE%E5%9F%BA%E5%9D%80/Snipaste_2021-03-22_01-50-43.png" alt="Snipaste_2021-03-22_01-15-22"></p><h4 id="Notepad记录全部偏移量"><a href="#Notepad记录全部偏移量" class="headerlink" title="Notepad记录全部偏移量"></a>Notepad记录全部偏移量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">  地址      偏移量<br>27CBAC88    5578<br>02A0B288    0868<br>007794F8  <span class="hljs-comment">#最后一个为基址</span><br></code></pre></td></tr></table></figure><h4 id="检验是基址偏移"><a href="#检验是基址偏移" class="headerlink" title="检验是基址偏移"></a>检验是基址偏移</h4><p>点击Add Address Manually -&gt; 勾选Pointer -&gt; Add Offset添加偏移，然后从下往上输入（记录也是，从最后记录的开始输）。然后更改这个值，发现更改后游戏数值即可变化。</p><p><img src="/2021/05/19/CE%E6%9F%A5%E6%89%BE%E5%9F%BA%E5%9D%80/Snipaste_2021-03-22_02-00-02.png" alt="Snipaste_2021-03-22_01-15-22"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在线工具</title>
    <link href="/2021/04/24/%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/"/>
    <url>/2021/04/24/%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<ul><li><p><a href="https://autkevin.github.io/html/JsonExportExcel.html">JsonExportExcel</a></p></li><li><p><a href="https://autkevin.github.io/html/JsonFormat.html">JsonFormat</a></p></li><li><p><a href="https://autkevin.github.io/html/comparetext.html">CompareText</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>在线工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
